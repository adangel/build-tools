<?xml version="1.0"?>
<ruleset name="dogfood7" 
    xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
    <description>Rules to check PMD itself.</description>

    <rule ref="net/sourceforge/pmd/pmd-dogfood-base.xml" />

    <!-- adjusted in PMD 7 -->
    <rule ref="category/java/errorprone.xml/CompareObjectsWithEquals">
        <priority>1</priority>
        <properties>
            <property name="typesThatCompareByReference" value="java.lang.Enum,java.lang.Class,net.sourceforge.pmd.lang.ast.Node,net.sourceforge.pmd.lang.ast.GenericToken"/>
        </properties>
    </rule>

    <!-- Note: These are the custom rule ported to PMD 7 -->

    <!-- PMD specific custom rules -->
    <rule name="UseInstanceofToCompareClasses"
          language="java"
          since="5.0"
          message="replace o.getClass().equals(MyClass.class) with o instanceof MyClass"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>replace o.getClass().equals(MyClass.class) with o instanceof MyClass. Make sure MyClass doesn't have descendants</description>
        <priority>1</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
<![CDATA[
//MethodCall[pmd-java:matchesSig("_#equals(java.lang.Object)")]
    [MethodCall[pmd-java:matchesSig("_#getClass()")]]
    [ArgumentList/ClassLiteral]
]]>
                </value>
            </property>
        </properties>
    </rule>

    <rule name="ReversedUseInstanceofToCompareClasses"
          language="java"
          since="5.0"
          message="replace MyClass.class.equals(o.getClass()) with o instanceof MyClass"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>replace MyClass.class.equals(o.getClass()) with o instanceof MyClass. Make sure MyClass doesn't have descendants</description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>
<![CDATA[
//MethodCall[pmd-java:matchesSig("_#equals(java.lang.Object)")]
    [ClassLiteral]
    [ArgumentList/MethodCall[pmd-java:matchesSig("_#getClass()")]]
]]>
                </value>
            </property>
        </properties>
    </rule>

    <rule name="DontCallSuperVisitWhenUsingRuleChain"
          language="java"
          message="Don't call super.visit() when using the rulechain"
          typeResolution="true"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>Calling super.visit breaks the rulechain, by starting a full visitor run from the passed node downwards. Add all needed nodes to the rulechain instead.</description>
        <priority>1</priority>
        <properties>
             <property name="version" value="2.0"/>
             <property name="xpath">
                <value>
<![CDATA[
(
(: java rule chain rule :)
//ClassOrInterfaceDeclaration[pmd-java:typeIs('net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule')]
|
(: generic rule that implements buildTargetSelector :)
//ClassOrInterfaceDeclaration[pmd-java:typeIs('net.sourceforge.pmd.lang.rule.AbstractRule')]
    [*/MethodDeclaration[@Name = 'buildTargetSelector']]
)
  (: but calling super.visit! :)
  [*/MethodDeclaration//MethodCall[SuperExpression][@MethodName = 'visit']]
]]>
                </value>
            </property>
        </properties>
    </rule>

    <rule name="AlwaysCallSuperWhenNotUsingRuleChain"
          language="java"
          message="Always call super.visit() when not using rulechain"
          typeResolution="true"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>Just returning without calling super stops visiting of nested nodes like inner classes.</description>
        <priority>3</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
                <value>
<![CDATA[
//ClassOrInterfaceDeclaration
    [ExtendsList/ClassOrInterfaceType[pmd-java:typeIs('net.sourceforge.pmd.lang.rule.AbstractRule')]]
    [not(ExtendsList/ClassOrInterfaceType[pmd-java:typeIs('net.sourceforge.pmd.lang.java.rule.AbstractJavaRulechainRule')])]
    [not(*/MethodDeclaration[@Name = 'buildTargetSelector'])]
    [*/MethodDeclaration[@Name = 'visit'][not(.//MethodCall[@MethodName = 'visit']/SuperExpression)]]
]]>
                </value>
            </property>
        </properties>
    </rule>

    <!-- Idea from https://github.com/pmd/pmd/pull/3609#discussion_r748292071 -->
    <rule name="ReuseInvocationMatcher"
          language="java"
          message="Reuse InvocationMatcher"
          typeResolution="true"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>Share the invocation matcher and not create a new one every time</description>
        <priority>1</priority>
        <properties>
            <property name="version" value="2.0" />
            <property name="xpath">
                <value>
<![CDATA[
//MethodCall[pmd-java:matchesSig("net.sourceforge.pmd.lang.java.types.InvocationMatcher#matchesCall(_)")]
    [MethodCall[pmd-java:matchesSig("net.sourceforge.pmd.lang.java.types.InvocationMatcher#parse(java.lang.String)")]]
]]>
                </value>
            </property>
        </properties>
    </rule>
</ruleset>
